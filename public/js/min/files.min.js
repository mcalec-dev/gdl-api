const fileList=document.getElementById("fileList"),breadcrumb=document.getElementById("breadcrumb"),basePath="/gdl/files",apiBasePath="/gdl/api/files",icons={directory:'<svg viewBox="0 0 24 24"><path d="M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"/></svg>',image:'<svg viewBox="0 0 24 24"><path d="M21 19V5c0-1.1-.9-2-2-2H5c-.55 0-1 .45-1 1v14c0 1.1.9 2 2 2h14c1.1 0-2-.9-2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"/></svg>',video:'<svg viewBox="0 0 24 24"><path d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 1.1.9 2 2 2h12c1.1 0-2-.9-2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"/></svg>',other:'<svg viewBox="0 0 24 24"><path d="M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z"/></svg>'};let currentDirectoryData=null,currentImageIndex=0,currentImageList=[],currentSort="name",currentSortDir="none";const SORT_STATES={name:"none",size:"none",type:"none",modified:"none"};function getFileType(e){const t=e.split(".").pop().toLowerCase();return["jpg","jpeg","png","webp","avif","gif"].includes(t)?"image":["mp4","webm","mov","avi","mkv"].includes(t)?"video":"other"}function formatSize(e){const t=["B","KB","MB","GB"];let n=e,a=0;for(;n>=1024&&a<t.length-1;)n/=1024,a++;return`${`${Math.round(100*n/100)} ${t[a]}`}`}function formatDate(e){return new Date(e).toLocaleString("en-US",{year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric",timeZone:"UTC"})}function getSortIcon(e){switch(e){case"asc":return"↑";case"desc":return"↓";default:return"↕"}}function updateBreadcrumb(e){const t=e.split("/").filter(Boolean);let n="",a=`<a href="${basePath}/">Home</a>`;t.forEach(((e,r)=>{n+=`/${e}`,r<t.length-1?a+=`<span>/</span><a href="${basePath}${n}/">${e}</a>`:a+=`<span>/</span><span>${e}</span><span>/</span>`})),breadcrumb.innerHTML=a}function renderSortToolbar(){const e=`\n    <button class="sort-button" data-sort="name">\n      <span>Name</span>\n      <span class="sort-icon">${getSortIcon(SORT_STATES.name)}</span>\n    </button>\n    <button class="sort-button" data-sort="size">\n      <span>Size</span>\n      <span class="sort-icon">${getSortIcon(SORT_STATES.size)}</span>\n    </button>\n    <button class="sort-button" data-sort="type">\n      <span>Type</span>\n      <span class="sort-icon">${getSortIcon(SORT_STATES.type)}</span>\n    </button>\n    <button class="sort-button" data-sort="modified">\n      <span>Modified</span>\n      <span class="sort-icon">${getSortIcon(SORT_STATES.modified)}</span>\n    </button>\n  `;document.querySelector(".sort-toolbar").innerHTML=e}function sortContents(e,t,n){return"none"===n?[...e].sort(((e,t)=>e.type!==t.type?"directory"===e.type?-1:1:e.name.localeCompare(t.name,void 0,{numeric:!0}))):[...e].sort(((e,a)=>{if(e.type!==a.type)return"directory"===e.type?-1:1;let r=0;switch(t){case"name":r=e.name.localeCompare(a.name,void 0,{numeric:!0});break;case"size":r=(e.size||0)-(a.size||0);break;case"type":{const t=e.name.split(".").pop()||"",n=a.name.split(".").pop()||"";r=t.localeCompare(n);break}case"modified":r=new Date(e.modified||0)-new Date(a.modified||0)}return"asc"===n?r:-r}))}async function loadDirectory(e=""){try{(e=e?decodeURIComponent(e):"")&&(e=e.replace(new RegExp(`^${basePath}/?`),"").replace(/\/+/g,"/").replace(/^\/|\/$/g,"")),fileList.innerHTML='<div class="loading"><span>Loading...</span></div>',updateBreadcrumb(e);const n=e?`/${e}/`:"";if(!currentDirectoryData||currentDirectoryData.path!==e){const i=await fetch(`${apiBasePath}${n}`),s=await i.json();if(!i.ok)throw new Error(s.error||"Unknown error occurred");currentDirectoryData={path:e,contents:s.contents}}const a=!!e&&currentDirectoryData.contents.some((e=>"file"===e.type));function t(e){switch(e){case"asc":return"↑";case"desc":return"↓";default:return"↕"}}fileList.classList.toggle("grid-view",a);let r="";const o=`\n            <button class="sort-button" data-sort="name">\n                <span>Name</span>\n                <span class="sort-icon">${t(SORT_STATES.name)}</span>\n            </button>\n            <button class="sort-button" data-sort="size">\n                <span>Size</span>\n                <span class="sort-icon">${t(SORT_STATES.size)}</span>\n            </button>\n            <button class="sort-button" data-sort="type">\n                <span>Type</span>\n                <span class="sort-icon">${t(SORT_STATES.type)}</span>\n            </button>\n            <button class="sort-button" data-sort="modified">\n                <span>Modified</span>\n                <span class="sort-icon">${t(SORT_STATES.modified)}</span>\n            </button>\n        `;document.querySelector(".sort-toolbar").innerHTML=o;sortContents(currentDirectoryData.contents,currentSort,currentSortDir).forEach((t=>{const n="directory"===t.type?"directory":getFileType(t.name),a=e?`${e}/${t.name}`:t.name;let o="file"===t.type?`${t.url||`/gdl/api/files/${a}`}`:null;o&&"image"===n&&!t.name.toLowerCase().endsWith(".gif")&&(o+="?x=50"),r+=`\n                <div class="file-item ${t.type}" data-path="${a}">\n                    ${o?`\n                        ${"video"===n?`\n                            <div class="video-preview-container">\n                                <video \n                                    class="file-preview video" \n                                    src="${o}" \n                                    preload="metadata"\n                                    onmouseover="this.play(); this.muted=false;" \n                                    onmouseout="this.pause(); this.currentTime=0; this.muted=true;"\n                                ></video>\n                            </div>\n                        `:"image"===n?`\n                            <div class="preview-container">\n                                <img class="file-preview loading" data-src="${o}" alt="${t.name}">\n                            </div>\n                        `:`\n                            <div class="file-icon ${n}">${icons[n]}</div>\n                        `}\n                    `:`\n                        <div class="file-icon ${n}">${icons[n]}</div>\n                    `}\n                    <div class="file-details">\n                        <div class="file-name">${t.name}</div>\n                        <div class="file-meta">\n                            <span>${formatDate(t.modified)}</span><br>\n                            <span>${"file"===t.type?formatSize(t.size):"Directory"}</span>\n                        </div>\n                    </div>\n                </div>`})),fileList.innerHTML=r,document.querySelectorAll(".sort-button").forEach((e=>{e.addEventListener("click",(()=>{const n=e.dataset.sort;Object.keys(SORT_STATES).forEach((e=>{e!==n&&(SORT_STATES[e]="none")})),"none"===SORT_STATES[n]?SORT_STATES[n]="desc":"desc"===SORT_STATES[n]?SORT_STATES[n]="asc":SORT_STATES[n]="none",document.querySelectorAll(".sort-button").forEach((e=>{const a=e.dataset.sort===n&&"none"!==SORT_STATES[n];e.setAttribute("data-active",a);e.querySelector(".sort-icon").textContent=t(SORT_STATES[e.dataset.sort])})),currentSort=n,currentSortDir=SORT_STATES[n];loadDirectory(window.location.pathname.replace(new RegExp(`^${basePath}/?`),"").replace(/\/+/g,"/").replace(/^\/|\/$/g,""))}))})),fileList.querySelectorAll(".file-item").forEach((e=>{e.addEventListener("click",(t=>{const n=e.dataset.path;if(e.classList.contains("directory")){t.preventDefault();const e=generateBrowseUrl(n);window.history.pushState({path:`${n}/`,sortBy:currentSort,sortDir:currentSortDir},"",e),loadDirectory(n)}}))})),document.querySelectorAll(".file-item.file").forEach((e=>{const t=getFileType(e.dataset.path);"image"!==t&&"video"!==t||e.addEventListener("click",(t=>{t.preventDefault(),t.stopPropagation();const n=Array.from(document.querySelectorAll(".file-item.file")).filter((e=>["image","video"].includes(getFileType(e.dataset.path))));currentImageList=n.map((e=>{const t=e.dataset.path;return{url:e.querySelector(".file-preview")?.src?.split("?")[0]||`/gdl/api/files/${t}`,name:t.split("/").pop(),path:t,type:getFileType(t)}})),currentImageIndex=n.findIndex((t=>t===e)),showImagePopup(currentImageIndex)}))})),a&&setupLazyLoading(),renderDirectory(currentDirectoryData.contents,e)}catch(c){fileList.innerHTML=`\n        <div class="error">\n            Error loading directory contents<br>\n            <small>${c.message}</small>\n        </div>`}}function setupFileClickHandlers(){fileList.querySelectorAll(".file-item").forEach((e=>{e.addEventListener("click",(t=>{const n=e.dataset.path;if(e.classList.contains("directory")){t.preventDefault();const e=generateBrowseUrl(n);window.history.pushState({path:`${n}/`,sortBy:currentSort,sortDir:currentSortDir},"",e),loadDirectory(n)}else if(e.classList.contains("file")){const a=getFileType(n);if("image"===a||"video"===a){t.preventDefault(),t.stopPropagation();const n=Array.from(document.querySelectorAll(".file-item.file")).filter((e=>["image","video"].includes(getFileType(e.dataset.path))));currentImageList=n.map((e=>{const t=e.dataset.path;return{url:e.querySelector(".file-preview")?.src?.split("?")[0]||`/gdl/api/files/${t}`,name:t.split("/").pop(),path:t,type:getFileType(t)}})),currentImageIndex=n.findIndex((t=>t===e)),showImagePopup(currentImageIndex)}}}))}))}window.addEventListener("popstate",(e=>{const t=e.state||{};t.sortBy&&(currentSort=t.sortBy,currentSortDir=t.sortDir);const n=window.location.pathname;loadDirectory(n===basePath||n===`${basePath}/`?"":n.replace(new RegExp(`^${basePath}/?`),"").replace(/\/+/g,"/").replace(/^\/|\/$/g,""))}));const initialLocation=window.location.pathname,currentPath=initialLocation===basePath||initialLocation===`${basePath}/`?"":initialLocation.replace(new RegExp(`^${basePath}/?`),"").replace(/\/+/g,"/").replace(/^\/|\/$/g,"");function setupLazyLoading(){const e=new IntersectionObserver((t=>{t.forEach((t=>{if(t.isIntersecting){const n=t.target;n.dataset.src&&(n.src=n.dataset.src,n.classList.remove("loading"),e.unobserve(n))}}))}),{rootMargin:"50px 0px",threshold:.1});document.querySelectorAll("img.file-preview.loading").forEach((t=>{e.observe(t)}))}function generateBrowseUrl(e){return e?`${basePath}/${e}/`:basePath}function handleDirectoryClick(e){e.preventDefault();const t=e.target.closest("a");if(!t)return;const n=t.getAttribute("href");if(!n)return;const a=n.replace(new RegExp(`^${basePath}/?`),"");loadDirectory(a),history.pushState({path:a},"",n)}function showImagePopup(e){if(e<0||e>=currentImageList.length)return;const t=currentImageList[e],n=document.getElementById("popup-viewer"),a=document.getElementById("popup-image"),r=document.getElementById("popup-video"),o=document.getElementById("image-title"),i=document.getElementById("image-counter"),s=document.getElementById("prev-image"),c=document.getElementById("next-image");a.style.display="none",r.style.display="none","video"===t.type?(r.src=t.url,r.style.display="block"):(a.src=t.url,a.style.display="block"),o.textContent=t.name,i.textContent=`${e+1} / ${currentImageList.length}`,s.disabled=0===e,c.disabled=e===currentImageList.length-1,n.style.display="flex",currentImageIndex=e}function setupImagePopupEvents(){const e=document.getElementById("popup-viewer"),t=document.getElementById("close-popup"),n=document.getElementById("prev-image"),a=document.getElementById("next-image");t.addEventListener("click",(()=>{const t=document.getElementById("popup-video");t.paused||t.pause(),e.style.display="none"})),e.addEventListener("click",(t=>{t.target===e&&(e.style.display="none")})),n.addEventListener("click",(()=>{currentImageIndex>0&&showImagePopup(currentImageIndex-1)})),a.addEventListener("click",(()=>{currentImageIndex<currentImageList.length-1&&showImagePopup(currentImageIndex+1)})),document.addEventListener("keydown",(t=>{if("flex"===e.style.display){const n=document.getElementById("popup-video");switch(t.key){case"Escape":n.paused||n.pause(),e.style.display="none";break;case"ArrowLeft":currentImageIndex>0&&showImagePopup(currentImageIndex-1);break;case"ArrowRight":currentImageIndex<currentImageList.length-1&&showImagePopup(currentImageIndex+1)}}}))}function setupSortButtons(){document.querySelectorAll(".sort-button").forEach((e=>{e.addEventListener("click",(()=>{const t=e.dataset.sort;Object.keys(SORT_STATES).forEach((e=>{e!==t&&(SORT_STATES[e]="none")})),"none"===SORT_STATES[t]?SORT_STATES[t]="desc":"desc"===SORT_STATES[t]?SORT_STATES[t]="asc":SORT_STATES[t]="none",currentSort=t,currentSortDir=SORT_STATES[t],renderDirectory(currentDirectoryData.contents,currentDirectoryData.path)}))}))}function renderDirectory(e,t){const n=!!t&&e.some((e=>"file"===e.type));fileList.classList.toggle("grid-view",n);const a=sortContents(e,currentSort,currentSortDir);renderSortToolbar();let r="";a.forEach((e=>{const n="directory"===e.type?"directory":getFileType(e.name),a=t?`${t}/${e.name}`:e.name;let o="file"===e.type?`${e.url||`/gdl/api/files/${a}`}`:null;o&&"image"===n&&!e.name.toLowerCase().endsWith(".gif")&&(o+="?x=50"),r+=`\n      <div class="file-item ${e.type}" data-path="${a}">\n        ${o?`\n          ${"video"===n?`\n            <div class="video-preview-container">\n              <video \n                class="file-preview video" \n                src="${o}" \n                preload="metadata"\n                onmouseover="this.play(); this.muted=false;" \n                onmouseout="this.pause(); this.currentTime=0; this.muted=true;"\n              ></video>\n            </div>\n          `:"image"===n?`\n            <div class="preview-container">\n              <img class="file-preview loading" data-src="${o}" alt="${e.name}">\n            </div>\n          `:`\n            <div class="file-icon ${n}">${icons[n]}</div>\n          `}\n        `:`\n          <div class="file-icon ${n}">${icons[n]}</div>\n        `}\n        <div class="file-details">\n          <div class="file-name">${e.name}</div>\n          <div class="file-meta">\n            <span>${formatDate(e.modified)}</span><br>\n            <span>${"file"===e.type?formatSize(e.size):"Directory"}</span>\n          </div>\n        </div>\n      </div>`})),fileList.innerHTML=r,setupSortButtons(),setupFileClickHandlers(),n&&setupLazyLoading()}loadDirectory(currentPath),window.addEventListener("popstate",(e=>{loadDirectory(e.state?.path||"")})),setupImagePopupEvents();const initialPath=window.location.pathname.replace(basePath,"");loadDirectory(initialPath),document.addEventListener("click",handleDirectoryClick);